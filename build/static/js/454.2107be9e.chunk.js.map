{"version":3,"sources":["components/Auth/LogIn.js","components/Global/Header.js"],"names":["Auth_LogIn","defaultState","email","password","userIsValid","state","_this","logIn","_callee","context","regenerator_default","a","wrap","_context","prev","next","auth","sent","setState","_objectSpread","props","onLoggedIn","stop","this","input","_defineProperty","target","name","value","key","_this2","react_default","createElement","GlobalImporter","stringNames","render","_ref2","strings","user","GlobalContainer","Consumer","className","Common","onClick","logOut","firstName","lastName","for","type","id","placeholder","required","autoFocus","onChange","e","onKeyDown","passworkKeyDown","check","remember","block","color","userNamePasswordInvalid","react","Header_Header","isOpen","toggle","prevState","islogInModalOpen","dark","fixed","expand","href","routes","home","path","displayName","navbar","timeout","about","styleGuide","languageTester","todo","nav","inNavbar","caret","right","userSettings","divider","togglelogInModal","ThemeSelector","LanguageSelector","__webpack_exports__"],"mappings":"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","file":"static/js/454.2107be9e.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\n\nimport { Alert, Button, Form, FormGroup, Input, Label } from 'components/Common'\nimport { GlobalContainerContext } from 'components/Global/GlobalContainer'\nimport GlobalImporter from 'components/Global/GlobalImporter'\n\nclass LogIn extends PureComponent {\n  defaultState = {\n    email: '',\n    password: '',\n    userIsValid: true\n  }\n\n  state = {\n    ...this.defaultState\n  }\n\n  static propTypes = {\n    onLoggedIn: PropTypes.func\n  }\n\n  onChange(input) {\n    this.setState({\n      [input.target.name]: input.target.value\n    })\n  }\n\n  logIn = async context => {\n    const userValid = await context.auth.logIn({ email: this.state.email, password: this.state.password })\n    if (userValid) {\n      this.setState({\n        ...this.defaultState\n      })\n      this.props.onLoggedIn()\n    } else {\n      this.setState({\n        userIsValid: false\n      })\n    }\n  }\n\n  passworkKeyDown(input, context) {\n    if (input.key === 'Enter') {\n      this.logIn(context)\n    }\n  }\n\n  render() {\n    return (\n      <GlobalImporter\n        stringNames={['auth']}\n        render={({ strings, user }) => (\n          <GlobalContainerContext.Consumer>\n            {context => {\n              return !context.user.email ? (\n                <Form>\n                  <FormGroup>\n                    <Label for=\"inputEmail\">{strings.email}</Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      id=\"inputEmail\"\n                      placeholder={strings.email}\n                      required=\"\"\n                      autoFocus=\"\"\n                      value={this.state.email}\n                      onChange={e => this.onChange(e)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"inputPassword\">{strings.password}</Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      id=\"inputPassword\"\n                      placeholder={strings.password}\n                      required=\"\"\n                      value={this.state.password}\n                      onChange={e => this.onChange(e)}\n                      onKeyDown={e => this.passworkKeyDown(e, context)}\n                    />\n                  </FormGroup>\n                  <FormGroup check>\n                    <Label check>\n                      <Input type=\"checkbox\" /> {strings.remember}\n                    </Label>\n                  </FormGroup>\n                  <Button block={true} className=\"mt-3\" color=\"primary\" onClick={() => this.logIn(context)}>\n                    {strings.logIn}\n                  </Button>\n                  {this.state.userIsValid === false && (\n                    <Alert color=\"danger\" className=\"mt-3\">\n                      {strings.userNamePasswordInvalid}\n                    </Alert>\n                  )}\n                </Form>\n              ) : (\n                <div className=\"text-center\">\n                  <Button onClick={() => context.auth.logOut()}>\n                    {strings.logOut} {context.user.firstName} {context.user.lastName}\n                  </Button>\n                </div>\n              )\n            }}\n          </GlobalContainerContext.Consumer>\n        )}\n      />\n    )\n  }\n}\n\nexport default LogIn\n","import PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\n\nimport { GlobalContainerContext } from 'components/Global/GlobalContainer'\nimport LanguageSelector from 'components/Global/LanguageSelector'\nimport ThemeSelector from 'components/Global/ThemeSelector'\n\nimport {\n  Collapse,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown\n} from 'components/Common'\nimport LogIn from 'components/Auth/LogIn'\n\nclass Header extends PureComponent {\n  state = {\n    isOpen: false\n  }\n\n  static propTypes = {\n    strings: PropTypes.object.isRequired,\n    user: PropTypes.object.isRequired\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }))\n  }\n\n  togglelogInModal() {\n    this.setState(prevState => ({\n      islogInModalOpen: !prevState.islogInModalOpen\n    }))\n  }\n\n  render() {\n    return (\n      <GlobalContainerContext.Consumer>\n        {context => (\n          <header>\n            <Navbar color=\"dark\" dark={true} fixed=\"top\" expand=\"md\">\n              <NavbarBrand href={this.props.strings.routes.home.path}>\n                {this.props.strings.routes.home.displayName}\n              </NavbarBrand>\n              <NavbarToggler onClick={() => this.toggle()} />\n              <Collapse isOpen={this.state.isOpen} navbar timeout={0}>\n                <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                    <NavLink href={this.props.strings.routes.about.path}>\n                      {this.props.strings.routes.about.displayName}\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink href={this.props.strings.routes.styleGuide.path}>\n                      {this.props.strings.routes.styleGuide.displayName}\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink href={this.props.strings.routes.languageTester.path}>\n                      {this.props.strings.routes.languageTester.displayName}\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink href={this.props.strings.routes.todo.path}>\n                      {this.props.strings.routes.todo.displayName}\n                    </NavLink>\n                  </NavItem>\n                  {this.props.user.firstName ? (\n                    <UncontrolledDropdown nav inNavbar>\n                      <DropdownToggle nav caret>\n                        {this.props.user.firstName} {this.props.user.lastName}\n                      </DropdownToggle>\n                      <DropdownMenu right>\n                        <DropdownItem href={this.props.strings.routes.userSettings.path}>\n                          {this.props.strings.routes.userSettings.displayName}\n                        </DropdownItem>\n                        <DropdownItem divider />\n                        <DropdownItem onClick={() => context.auth.logOut()}>{this.props.strings.logOut}</DropdownItem>\n                      </DropdownMenu>\n                    </UncontrolledDropdown>\n                  ) : (\n                    <NavItem>\n                      <span className=\"nav-link cursor-pointer\" onClick={() => this.togglelogInModal()}>\n                        {this.props.strings.logIn}\n                      </span>\n                    </NavItem>\n                  )}\n                  <NavItem>\n                    <ThemeSelector />\n                  </NavItem>\n                  <LanguageSelector />\n                </Nav>\n              </Collapse>\n            </Navbar>\n            <Modal isOpen={this.state.islogInModalOpen} toggle={() => this.togglelogInModal()}>\n              <ModalHeader toggle={() => this.togglelogInModal()}>{this.props.strings.logIn}</ModalHeader>\n              <ModalBody>\n                <LogIn onLoggedIn={() => this.togglelogInModal()} />\n              </ModalBody>\n            </Modal>\n          </header>\n        )}\n      </GlobalContainerContext.Consumer>\n    )\n  }\n}\n\nexport default Header\n"],"sourceRoot":""}